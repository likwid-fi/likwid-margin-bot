/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LikwidPancakeswapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "likwidRouter"
      | "likwidToPancakeswap"
      | "owner"
      | "pancakeswapToLikwid"
      | "swapV3"
      | "transferOwnership"
      | "universalRouter"
      | "withdraw"
      | "wrapNative"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "likwidRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likwidToPancakeswap",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeswapToLikwid",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapV3",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "universalRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapNative",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "likwidRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "likwidToPancakeswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeswapToLikwid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapV3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universalRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapNative", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LikwidPancakeswap extends BaseContract {
  connect(runner?: ContractRunner | null): LikwidPancakeswap;
  waitForDeployment(): Promise<this>;

  interface: LikwidPancakeswapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  likwidRouter: TypedContractMethod<[], [string], "view">;

  likwidToPancakeswap: TypedContractMethod<
    [
      poolId: BytesLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      likwidIn: BigNumberish,
      likwidOutMin: BigNumberish,
      pancakesOutMin: BigNumberish
    ],
    [[bigint, bigint] & { likwidOut: bigint; pancakesOut: bigint }],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pancakeswapToLikwid: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      poolId: BytesLike,
      pancakesIn: BigNumberish,
      pancakesOutMin: BigNumberish,
      likwidOutMin: BigNumberish
    ],
    [[bigint, bigint] & { pancakesOut: bigint; likwidOut: bigint }],
    "payable"
  >;

  swapV3: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  universalRouter: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [currency: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  wrapNative: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "likwidRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "likwidToPancakeswap"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      likwidIn: BigNumberish,
      likwidOutMin: BigNumberish,
      pancakesOutMin: BigNumberish
    ],
    [[bigint, bigint] & { likwidOut: bigint; pancakesOut: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pancakeswapToLikwid"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      poolId: BytesLike,
      pancakesIn: BigNumberish,
      pancakesOutMin: BigNumberish,
      likwidOutMin: BigNumberish
    ],
    [[bigint, bigint] & { pancakesOut: bigint; likwidOut: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapV3"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "universalRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [currency: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrapNative"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
